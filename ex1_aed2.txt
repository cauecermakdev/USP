1. ler registros(stdin). // ler arquivo binario
2. salvar registros em arquivo binário
3. ler 10 ultimos registros do arquivo binario
4. exibi-los na saida (stdout)

Cada registro: 

Numero USP - int
Nome completo - char[50]
Curso - char[50]
Nota - float

Registros ficarão assim: 
[[Numero USP][Nome][Curso][Nota]][[Numero USP][Nome][Curso][Nota]][[Numero USP][Nome][Curso][Nota]]

Entrada: 
85,Ferdinand B. Bass,Estatistica,7
86,Martena W. Herrera,Estatistica,3
87,Rigel N. Morales,Estatistica,6
88,Ulla G. Knowles,Sistemas de Informacao,9
89,Magee H. Cantrell,Ciencia da Computacao,8
90,Ahmed H. Brooks,Estatistica,5
91,Moses X. Wynn,Ciencia da Computacao,5
92,Steel I. Combs,Sistemas de Informacao,4
93,Gail Q. Downs,Estatistica,3
94,Barclay O. Barber,Estatistica,7
95,Aubrey S. Campos,Engenharia da Computacao,6
96,Fleur E. Larsen,Estatistica,3
97,Chester C. Spencer,Ciencia da Computacao,7
98,Erica Z. Lang,Sistemas de Informacao,0
99,Brielle D. Buckner,Engenharia da Computacao,5
100,Ora K. Boyd,Estatistica,6


Saída esperada: 
nUSP: 91
Nome: Moses X. Wynn
Curso: Ciencia da Computacao
Nota: 5.00

nUSP: 92
Nome: Steel I. Combs
Curso: Sistemas de Informacao
Nota: 4.00

>> comentar code
>> Alocações dinamicas
>> USAR: ftell, fseek e fread
>> salvar em arquivo binário e dps ler
>> Ler apenas o que será escrito na saida padrão
>> fechar arquivo ao final



DICAS: 
. usem struct para estruturar as informacoes do registro
. nao tentem ler os registros como struct, leiam cada campo do registro separadamente
. modularizem o codigo em varias funcoes pequenas
. nomes significativos para as variaveis
.[não entendi] Após escreverem um registro utilizem o fflush para escrever o buffer, contido na struct FILE, para o disco.



int main(){
 float *vector;
 int vectorSize;
 long fileSize;
 FILE *fp;

 fp = fopen("data/numbers.bin","rb");

 fseek(fp, 0, SEEK_END);
 fileSize = ftell(fp);
 fseek(fp, 0, SEEK_SET);

 vectorSize = fileSize/sizeof(float);
 vector = (float*) malloc(vectorSize*sizeof(float));
 fread(vector, sizeof(float), vectorSize, fp);

 for(int i = 0; i < vectorSize; ++i)
 printf("%f ", vector[i]);
 printf("\n");
 fclose(fp);
 return 0;
}




//#run codes joga as entradas e eu tenho só que receber?

//escreve
vectorSize = fileSize/sizeof(float);
vector = (float*) malloc(vectorSize*sizeof(float));
fread(vector, sizeof(float), vectorSize, fp);



int main(){
#lê o arquivo csv 

FILE *fp;
fp = fopen("1.in","r");
while(fp != ","){
	
printf("%s", );



}